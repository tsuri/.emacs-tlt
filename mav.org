#+TITLE: Emacs Configuration
#+DESCRIPTION: An org-babel based emacs configuration I find useful
#+LANGUAGE: en
#+PROPERTY: results silent

* Table of Contents :TOC:
- [[#introduction][Introduction]]
  - [[#emacs-startup][Emacs Startup]]
- [[#general][General]]
  - [[#package-management---act-i][Package management - Act I]]
  - [[#save-areas][Save Areas]]
  - [[#secrets][Secrets]]
- [[#global-keybinding][Global Keybinding]]
- [[#movement][Movement]]
- [[#emacs-debugging][Emacs debugging]]
- [[#unclassified-packages][Unclassified Packages]]
- [[#future-work][Future Work]]

* Introduction
  This is my personal Emacs configuration.  This is not the first time
  I declare [[https://www.emacswiki.org/emacs/DotEmacsBankruptcy][Emacs bankrupcy]] and start over with a new emacs life.

  It is not intended to be general or beginner-friendly.  If you're a
  beginner you'll probably be better off with one of the many emacs
  configurations with batteries included.

  Also, my Emacs stays on for weeks or months at a time; I'm not
  interested in reducing startup time or delaying loding of packages
  until they're first used. It simply doesn't affect me.
  
** Emacs Startup
At times I want to work with different Emacs configurations. Some
times it in order to work on a new configuration of mine, some
times is to test some other Emacs config frameworks like Spacemacs
or Doom Emacs. 

I keep around multiple configurations and [[https://github.com/plexus/chemacs2][chemacs2]] helps with that
as it allow to define a default configuration while allowing
selecting alternatives.

When starting with this new configuration, I placed the following in
~$HOME/.emacs-profiles.el~:

#+BEGIN_SRC emacs-lisp :tangle no
  (("default" . ((user-emacs-directory . "~/.emacs-default.d")))
   ("tlt" . ((user-emacs-directory . "~/.emacs-tlt"))))
#+END_SRC

I also removed ~~/.emacs~ (these days the only reason for having a
.emacs file is if you where using ~chemacs~, the original version).

Last, the following goes in ~~/.emacs-tlt/init.el~:

#+begin_src emacs-lisp :tangle no
  (require 'org)
  (let ((mav-org
	 (concat (file-name-as-directory user-emacs-directory) "mav.org")))
    (org-babel-load-file mav-org))
#+end_src

Note that the org-mode file cannot be called ~init.org~ as the extracted
emacs lisp would be saved in ~init.el~ with obvious conflict. I
haven't found a way to specify a different destination using org-babel-load-file.

I can see two alternatives to be able to use `init.org`:
- tangle init.org on save. I don't like this too much as it requires
  to edit the file using emacs.
- implement an alternative to org-babel-load-file that tangle into a
  temporary buffer and then evaluate it.

Both seem more work than the benefit they give and ~config.org~ will be.

By the way, ~tlt~ is because this is *T* he  *L* ast  *T* ime I start from
scratch.

* General

** Package management - Act I
Here we set up the bare minimum for installing a few packages we need
before ~use-package~ is available.

#+BEGIN_SRC emacs-lisp
  (require 'subr-x) ; for string-remove-suffix
  (defun mav/litter-directory (leaf-dir &optional version)
    (let* ((dir (directory-file-name
                 (file-name-directory user-emacs-directory)))
           (distribution (string-remove-suffix ".d" dir))
           (version-dir (if version version "")))
      (file-name-as-directory (format "%s-save.d/%s/%s" distribution leaf-dir version-dir))))
#+END_SRC

Bytecompiled files are at times incompatible across different versions
of emacs. I solve this by keeping versioned directories, one for each
emacs version I use. For now I haven't implemented any form of garbage
collection.

We have a conundrum here: if we don't call ~package-initialize~ here we
cannot install ~use-package~. But if we do call it here we have trouble
when loading ~auto-package-update~ as the first thing that package does
is a ~(require 'package)~ followed by a ~(package-initialize)~, both
unconditionally. It wouldn't be a problem if Emacs then didn' issue a
warning =Warning (package): Unnecessary call to ‘package-initialize’ in
init file=. Even the warning wouldn't be a problem, if documentation
didn't say that double calls are reserved for "advanced" cases,
without saying what those would be or providing an example.
I've found in the interubes a number of suggestions to be placed in
=early-init.el=, but none of them worked for me. So, for now I simply
disable warnings of this nature when loading
~auto-package-update~. Unfortunately everything after it has those
warning disabled (maybe I should explicitely re-enable them)

#+begin_src emacs-lisp
  (setq package-user-dir (mav/litter-directory "packages" emacs-version))
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")))
  (setq package-archive-priorities
        '(("org" . 50)
          ("melpa-stable" . 40)
          ("gnu" . 30)
          ("melpa" . 10)))
  (setq package-menu-hide-low-priority t)
  (require 'package)
  (package-initialize)
  (package-refresh-contents)
#+end_src

#+begin_src emacs-lisp
  (package-install 'use-package)
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

In theory, this package is deprecated and the functionality built-in
into ~use-package~. In practice, without it I cannot get the ~:chords~
keyword to work.
#+begin_src emacs-lisp
  (use-package use-package-chords
    :config (key-chord-mode 1))
#+end_src

~paradox~ is a nicer UI for the regular list-packages.
Note: as far as I know, all emacswiki packages have been reoved from
ELPA and thus ~paradox-hide-wiki-packages~ might not be useful.

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :config
  (setq-default
   paradox-column-width-package 27
   paradox-column-width-version 13
   paradox-execute-asynchronously t
   paradox-github-token (cadr (auth-source-user-and-password "api.github.com" "tsuri^paradox"))
   paradox-hide-wiki-packages t)
  (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print)
  (paradox-enable))
#+END_SRC

I don't remember to upgrade packages ever. Fully automatic is a bit
too dangerous and I would not look into new features, so I make emacs
ask me before updating packages.
TODO(mav) make the installed packages into a local git repository and
use ~auto-package-update-before-hook~ for committing (or maybe is better
to commit after an upgrade)

#+begin_src emacs-lisp
  (use-package auto-package-update
    :init (setq warning-suppress-log-types '((package reinitialization)))
    :config
     (setq auto-package-update-delete-old-versions t
           auto-package-update-interval 10
           auto-package-update-prompt-before-update t))
#+end_src

** Save Areas
Emacs (and emacs packages) tend to store lot of files in the .emacs.d directory. This wouldn't be
particularly problematic if it wasn't for the fact that my .emacs-*.d is also a git repository. It is
possible to ignore files in git, but it become annoying to have to modify .gitignore just because I
tried a new package. So we will move everything to a ~.save~ directory.

Most of this will be accomplished by the ~no-litter~ package, but we initialize here a few variables
so that the same places can be used by other packages no-litter knows nothing about.


#+BEGIN_SRC emacs-lisp
  (setq no-littering-etc-directory (expand-file-name "~/.emacs-save.d/config"))
  (setq no-littering-var-directory (expand-file-name "~/.emacs-save.d/data"))
  (setq custom-file (expand-file-name "custom.el" no-littering-var-directory))
  (package-install 'no-littering)
  (require 'no-littering)
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (desktop-save-mode 1)
#+END_SRC

** Secrets

#+begin_src emacs-lisp
  (use-package auth-source
    :ensure nil
    :custom
    (auth-sources '((:source "~/.authinfo.gpg"))))
#+end_src

#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :ensure nil
    :config
    (epa-file-enable))
#+END_SRC

* Global Keybinding

#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :config
    (key-chord-define-global ".."     'comment-region)
    (key-chord-define-global ",,"     'sort-lines)
    (key-chord-define-global "//"     'align-regexp))
#+END_SRC

* Movement

When more than two windows are displayed and you press ~C-x o~  (normally bound to ~other-window~)
~~ace-window~ overlays a number in each window so that you can quickly
navigate to the desired target window. And then we give ourselves a
chord, so that ~''~ can be used to switch window.

#+begin_src emacs-lisp 
      (use-package ace-window
        :bind
        ("C-x o" . ace-window)
        :chords
        (("''" . ace-window))
        :custom-face
        (aw-leading-char-face ((t (:inherit ace-jump-face-foreground :font "FasterOne" :height 2.5 :foreground "dark gray" )))))
#+end_src

* Emacs debugging
When testing changes to the emacs configuration it is very useful to
be able to restart emacs from within Emacs. The following allows to
restart emacs when C-x C-c (normally bound to save-buffers-kill-emacs)
is invoked with a universal argument.

Note that when we restart emacs, all open files and frames are
restored (curtesy of the desktop package).  We also retrieve the
initial command line arguments. ~restart-emacs~ doesn't do this as
there's no platform independent way for doing it. Note that
~command-line-args~ is not sufficient as many arguments are deleted
while being processed by the emacs C code (for instance ~--debug-init~ )
I'd still think that it would be better than completely ignoring them,
but I'm not the auhor of the ~~restart-emacs~ package.  Here I collect
arguments from the ~/proc~ file system, I only care about linux anyhow.

#+BEGIN_SRC emacs-lisp
  (defun mav/emacs-args ()
    (with-temp-buffer
      (insert-file-contents "/proc/self/cmdline")
      (split-string (buffer-string) "\0" t)))

  (defun mav/restart-emacs-or-exit (arg)
    (interactive "P")
    (if arg
        (restart-emacs (cdr (mav/emacs-args)))
      (save-buffers-kill-emacs)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :bind
    ("C-x C-c" . mav/restart-emacs-or-exit))
#+END_SRC

In elisp mode, expanding macros is often an important complement to documentation.
#+begin_src emacs-lisp
  (use-package macrostep
  :bind (:map  emacs-lisp-mode-map (("C-c e" . macrostep-expand))))
#+end_src

Paredit is very useful for editing lisp code. If you do it often
enough to remember the relative keybinding.
#+begin_src emacs-lisp
(use-package paredit
  :init
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook #'enable-paredit-mode)
  :config
  (show-paren-mode t)
  :bind (("M-[" . paredit-wrap-square)
         ("M-{" . paredit-wrap-curly))
  :diminish nil)
#+end_src
* Unclassified Packages
Here we have packages that I have installed and I'm probably playing
with. They need to be moved over time to the appropriate section in
the main part of this configuration file.

* Future Work
This section list things that captured my interest. The plan is to
look deeper in what these packages offer.

- activity-watch-mode
- disaster. I actually did something similar that worked on a
  region. Lost the source code. I don't think it annotated asm w/
  high-level code. These days, I'd want multiple tabs for different
  compilers/optimization. Also, needs to use the compilation command
  database of clang.

  Fonts:
  - https://overpassfont.org/
